{
  "name": "node-lambda",
  "version": "0.1.5",
  "description": "Command line tool for locally running and remotely deploying your node.js applications to Amazon Lambda.",
  "main": "lib/main.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "mocha test/*.js"
  },
  "bin": {
    "node-lambda": "./bin/node-lambda"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/rebelmail/node-lambda.git"
  },
  "keywords": [
    "lambda",
    "aws",
    "amazon",
    "amazon-lambda",
    "aws-lambda",
    "lambda-node",
    "deploy",
    "deployment"
  ],
  "author": {
    "name": "motdotla"
  },
  "license": "BSD",
  "devDependencies": {
    "mocha": "",
    "should": ""
  },
  "dependencies": {
    "aws-sdk": "^2.0.28",
    "commander": "^2.5.0",
    "dotenv": "^0.4.0"
  },
  "gitHead": "4c2c95342600f97b7873c526869257d90969f4d3",
  "bugs": {
    "url": "https://github.com/rebelmail/node-lambda/issues"
  },
  "homepage": "https://github.com/rebelmail/node-lambda",
  "_id": "node-lambda@0.1.5",
  "_shasum": "5d9f6d24053965fbab3a3e27024e0dec386bcf75",
  "_from": "node-lambda@0.1.5",
  "_npmVersion": "1.4.28",
  "_npmUser": {
    "name": "motdotla",
    "email": "mot@mot.la"
  },
  "maintainers": [
    {
      "name": "motdotla",
      "email": "mot@mot.la"
    }
  ],
  "dist": {
    "shasum": "5d9f6d24053965fbab3a3e27024e0dec386bcf75",
    "tarball": "http://registry.npmjs.org/node-lambda/-/node-lambda-0.1.5.tgz"
  },
  "_resolved": "https://registry.npmjs.org/node-lambda/-/node-lambda-0.1.5.tgz",
  "readme": "# node-lambda\n\n![node-lambda](../master/node-lambda.png?raw=true)\n\nCommand line tool to locally run and deploy your node.js application to Amazon Lambda.\n\n[![BuildStatus](https://travis-ci.org/RebelMail/node-lambda.png?branch=master)](https://travis-ci.org/motdotla/node-lambda)\n[![NPM version](https://badge.fury.io/js/node-lambda.png)](http://badge.fury.io/js/node-lambda)\n\n## Installation\n\n```\nnpm install -g node-lambda\n```\n\n## Usage\n\nRun your Amazon Lambda app locally.\n\n```\nnode-lambda run\n```\n\nWhen ready to deploy for the first time, run the following.\n\n```\nnode-lambda setup\necho \".env\\nevent.json\" >> .gitignore\nnode-lambda deploy -e staging\n```\n\nIt's a good idea to gitignore the generated `event.json` and `.env` file. You can do that with the following command:\n\n```\necho \".env\\nevent.json\" >> .gitignore\n```\n\nYou can subsequenetly, just call the following.\n\n```\nnode-lambda deploy -e staging\n```\n\n### Command line flags\n\nYou can opt to use command line flags instead of a `.env.` file.\n\n#### run [flags]\n```\nnode-lambda run [flags]\n```\n\n##### Example\n\n```\n./node_modules/.bin/node-lambda run --help\n\n  Usage: run [options]\n\n  Options:\n\n    -h, --help                     output usage information\n    -h, --handler [index.handler]  Lambda Handler {index.handler}\n```\n\n#### deploy [flags]\n\n```\nnode-lambda deploy [flags]\n```\n\n##### Example\n\n```\n./node_modules/.bin/node-lambda deploy --help\n\n  Usage: deploy [options]\n\n  Options:\n\n    -h, --help                        output usage information\n    -e, --environment [staging]       Choose environment {development, stating, production}\n    -a, --accessKey [your_key]        AWS Access Key\n    -s, --secretKey [your_secret]     AWS Secret Key\n    -r, --region [us-east-1]          AWS Region\n    -n, --functionName [node-lambda]  Lambda FunctionName\n    -h, --handler [index.handler]     Lambda Handler {index.handler}\n    -m, --mode [event]                Lambda Mode\n    -o, --role [your_role]            Amazon role\n    -m, --memorySize [128]            Lambda Memory Size\n    -t, --timeout [3]                 Lambda Timeout\n    -d, --description [missing]       Lambda Description\n    -u, --runtime [nodejs]            Lambda Runtime\n```\n",
  "readmeFilename": "README.md"
}
